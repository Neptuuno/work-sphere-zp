@model ApplicationUser
@{
    ViewData["Title"] = "User detail Page";
}

<h1>User details</h1>
<h1>@Model.Email</h1>
@if (Model.Age != null)
{
    <h1>@Model.Age</h1>
}

<div id="chatBox">
    <input type="text" id="messageInput"/>
    <button id="sendButton">Send</button>
    <div class="row p-1">
        <div class="col-6">
            <hr/>
        </div>
    </div>
    <div class="row p-1">
        <div class="col-6">
            <ul id="messagesList"></ul>
        </div>
    </div>
</div>

<!-- Add this line -->
<input type="hidden" id="userInput" value="@Model.UserName"/>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
"use strict";

var connection = new signalR.HubConnectionBuilder().withUrl("/chat").build();

//Disable the send button until connection is established.
document.getElementById("sendButton").disabled = true;

connection.on("ReceiveMessage", function (user, message) {
    var li = document.createElement("li");
    document.getElementById("messagesList").appendChild(li);
    // We can assign user-supplied strings to an element's textContent because it
    // is not interpreted as markup. If you're assigning in any other way, you 
    // should be aware of possible script injection concerns.
    li.textContent = `${user} says ${message}`;
});

connection.start().then(function () {
    document.getElementById("sendButton").disabled = false;
}).catch(function (err) {
    return console.error(err.toString());
});

document.getElementById("sendButton").addEventListener("click", function (event) {
    var user = document.getElementById("userInput").value;
    var message = document.getElementById("messageInput").value;
    connection.invoke("SendMessage", user, message).catch(function (err) {
        return console.error(err.toString());
    });
    event.preventDefault();
});
</script>