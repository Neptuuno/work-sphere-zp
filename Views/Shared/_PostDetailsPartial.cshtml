@using SocialNetwork.Services
@using Microsoft.AspNetCore.Identity
@model SocialNetwork.Models.PostModel
@inject FileService FileService
@inject PostService PostService
@inject UserManager<ApplicationUser> UserManager

@{
    var user = await UserManager.GetUserAsync(User);
}

<div class="border border-black shadow-offset p-6 w-6/12">
    <div class="flex justify-between">
        <a asp-controller="User" asp-action="Detail" asp-route-id="@Model.ApplicationUser.Id">
            <div class="flex gap-2 items-center">
                <img class="w-12 h-12 rounded-full" src="@FileService.GetImageFullUrl(Model.ApplicationUser.ImageUrl)" alt="profile image"/>
                <h3 class="text-lg">@Model.ApplicationUser.UserName</h3>
            </div>
        </a>
        <div class="bg-primary rounded p-2 text-gray-900 shadow-offset border-black border sm:text-sm sm:leading-6">
            <h4 class="text-3xl">@Model.PostType</h4>
        </div>
    </div>
    <a asp-controller="Post" asp-action="Details" asp-route-id="@Model.Id">
        <div class="flex justify-between items-center">
            <h1 class="text-4xl my-8">@Model.Title</h1>
            <div class="bg-blue-500 text-white rounded p-2 shadow-offset border-black border sm:text-sm sm:leading-6">
                <h4 class="text-3xl">@Model.Category</h4>
            </div>
        </div>
        <div class="block h-64 rounded p-2 text-gray-900 shadow-offset border border-black sm:text-sm sm:leading-6">
            <p class="text-lg">@Model.Description</p>
        </div>

        @if (FileService.GetImageFullUrl(Model.ImageUrl) != null)
        {
            <div class="mt-8">
                <img src="@FileService.GetImageFullUrl(Model.ImageUrl)" class="w-full h-auto rounded p-2 shadow-offset ring-1 ring-inset ring-black focus-visible:outline-none sm:text-sm sm:leading-6" alt="post image"/>
            </div>
        }
    </a>
    <div class="flex mt-8 justify-between items-center">
        <div class="flex gap-2">
            @if (Model.UpdatedOn != null)
            {
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99"/>
                </svg>

                <h4> @Model.UpdatedOn?.ToLocalTime().ToShortDateString() - @Model.UpdatedOn?.ToLocalTime().ToShortTimeString()</h4>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5m-13.5-9L12 3m0 0 4.5 4.5M12 3v13.5"/>
                </svg>
                <h4> @Model.PostedOn.ToLocalTime().ToShortDateString() - @Model.PostedOn.ToLocalTime().ToShortTimeString()</h4>
            }
        </div>
        @foreach (var likedBy in Model.LikedByUsers)
        {
            <a asp-controller="User" asp-action="Detail" asp-route-id="@likedBy.Id">
                <img class="w-8 h-8 rounded-full" src="@FileService.GetImageFullUrl(likedBy.ImageUrl)" alt="profile image"/>
            </a>
        }
        <div class="flex gap-2 items-center" x-data="{ liked: @(PostService.HasLikedPost(user, Model).ToString().ToLower()) }">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-red-500 cursor-pointer" x-on:click="liked = !liked; updateLike('@Model.Id', '@user.Id', liked)" x-show="!liked">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"/>
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 text-red-500 cursor-pointer" x-on:click="liked = !liked; updateLike('@Model.Id', '@user.Id', liked)" x-show="liked">
                <path d="m11.645 20.91-.007-.003-.022-.012a15.247 15.247 0 0 1-.383-.218 25.18 25.18 0 0 1-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0 1 12 5.052 5.5 5.5 0 0 1 16.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 0 1-4.244 3.17 15.247 15.247 0 0 1-.383.219l-.022.012-.007.004-.003.001a.752.752 0 0 1-.704 0l-.003-.001Z"/>
            </svg>
            <p>@Model.LikedByUsers.Count</p>

            @if (PostService.IsAuthorized(user, Model))
            {
                <form asp-controller="Post" asp-action="Delete" class="inline-block">
                    <input type="hidden" asp-for="Id"/>
                    <input type="submit" value="Delete" class="btn-red"/>
                </form>
            }
            @if (PostService.IsAuthor(user, Model))
            {
                <a class="btn-primary bg-yellow-500 hover:bg-yellow-600" asp-controller="Post" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
            }
        </div>
    </div>
</div>

<script>
        function updateLike(postId, userId, liked) {
            fetch('/Post/UpdateLike', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: postId, userId: userId, liked: liked })
            });
        }
    </script>